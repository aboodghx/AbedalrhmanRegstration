// <auto-generated />
using System;
using Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Identity.Migrations
{
    [DbContext(typeof(DatabaseService))]
    [Migration("20241028152122_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Identity.Models.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Identity.Models.RequestFlowStpe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FlowStepType")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstStep")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastStep")
                        .HasColumnType("bit");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestFlowStpes");
                });

            modelBuilder.Entity("Identity.Models.Step", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FlowStepType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Steps");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89c150e7-516e-4307-bc7f-8bc0c5975701"),
                            FlowStepType = 1,
                            Name = "Phone Number Confrmation",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("2dd8b03e-edc0-4db2-8bb1-b5b327e98b8b"),
                            FlowStepType = 1,
                            Name = "Email Confrmation",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("5e8569c9-6b12-4c48-ab9f-36cf196a6e6e"),
                            FlowStepType = 1,
                            Name = "Policy Confrmation",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("790d83b4-4599-43e1-899b-067310f57376"),
                            FlowStepType = 1,
                            Name = "PIN Confrmation",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("e0321176-68f6-4bc7-8504-fd1e3584445e"),
                            FlowStepType = 2,
                            Name = "Biomtric Confirmation",
                            Type = 5
                        });
                });

            modelBuilder.Entity("Identity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ICNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsVerifyBiometric")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerifyEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerifyPIN")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerifyPhoneNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerifyPolicy")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("IsVerifyEmail = 0");

                    b.HasIndex("ICNumber")
                        .IsUnique()
                        .HasFilter("[ICNumber] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("IsVerifyPhoneNumber = 0");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Identity.Models.RequestFlowStpe", b =>
                {
                    b.HasOne("Identity.Models.Request", "Request")
                        .WithMany("RequestFlowStpes")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Identity.Models.Request", b =>
                {
                    b.Navigation("RequestFlowStpes");
                });
#pragma warning restore 612, 618
        }
    }
}
